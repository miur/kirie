#!/usr/bin/env bash
#%SUMMARY: help and command completion for main app
#%PERF: 35ms
set -fCueEo pipefail

main=${KIRIE_MAINAPP:?}
dbase=${WIW_CACHE_DIR:?}  # =${XDG_CACHE_HOME:-$HOME/.cache}/$main

# NEED: short preview on formats with description when completing very first word
suggest(){ [[ $1 == -r ]] && local r=$1 && shift; "$main" kirie/suggest "$dbase/$1" "${r:+$dbase}" "${@:2}"; }

# NOTE: recursive help for all subcommands on single page
exedesc(){ suggest -r "$1" -xtype f -printf '%P' \
  -execdir sed -n '/^#%SUMMARY:\s*/{s//:/;p;q}' {} \; \ | column -tN2 -s: -o ' | '; }

die(){ echo "Err: $1"; help "${@:2}" >&2; exit 2; }

help(){ local cmd=$1
  local nmg=${cmd##*/}
  local dir=${cmd%$nmg}

  echo "[${main}] $cmd"

  # ALT:BET? $ suggest -r "$cmd" | tree -aAC --noreport --dirsfirst --fromfile -- .

  # TRY: print help w/o symlinks annotated / and --help-all with -> symlink
  LC_ALL=C tree --noreport -aAC --prune --matchdirs --dirsfirst \
    -I "_*" -P "${nmg}*" -- "$dbase/$dir" | tail -n +2
}

getpath(){ declare -rn cmdpath=$1; local cmd=$2 count
  cmdpath=$("$main" kirie/suggest "$dbase/$cmd")
  count=${cmdpath//[^$'\n']}${cmdpath:+.}
  count=${#count}

  ((count < 1)) && die "unknown command" "$cmd"
  ((count > 1)) && die "found multiple N=$count commands" "$cmd"
  [[ -x $dbase/$cmd ]] || die "incomplete command" "$cmd"
}


arg=${1-}
cmd=${2-}
shift || die "no arguments (print help)" ""


# [_] BUG: wiw .cf/<TAB> don't work for ZSH
#   => TEMP:HACK: must return full list of suggestions in case of crossing symlink boundary

## NEED: suppress further completion FIXME: suppress only if not supported by end-binary
case $arg
in -h|--help) help "$cmd"
;; -H|--help-all) suggest -r "$cmd"
;; --suggest-next-option) suggest -r "$cmd"
;; --list-descriptions) exedesc "$cmd"
;; *) exe=; getpath exe "$arg"; exec "$exe" "$@"
esac
