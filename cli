#!/usr/bin/env bash
#%SUMMARY: print help and input completion for app
#%PERF: 35ms
set -fCueEo pipefail -o noglob
clib=${WIW_CACHE_DIR:?}

searchcmd(){ local d=$1; shift
  [[ -d $d ]] || return
  (($#)) || set -- -printf '%P\n'
  ## BUG: prune will remove everything because "~/.cache/wiw/*" matches hidden mask
  # find -H "$d" -mindepth 1 \( -name '_*' -o -path '*/.*' \) -prune -o -xtype f -executable "$@"
  find -H "$d" -mindepth 1 -not \( -name '_*' -o -name '.git' \) -xtype f -executable "$@"
}

# NEED: short preview on formats with description when completing very first word
nextcmd(){ searchcmd "$clib/$1" | sort || true; }
exedesc(){ searchcmd "$clib/$1" -printf '%P' -execdir sed -n '/^#%SUMMARY:\s*/{s//:"/;s/$/"/;p;q}' {} \; | sort; }

die(){ echo "Err: $1"; shift; help "$@" >&2; exit 2; }
help(){ local cmd=$1
  echo "[operations]"
  { while [[ ${cmd:+x} ]]; do
      tree --noreport "$clib/$cmd" && return
      [[ $cmd == */* ]] || break && cmd=${cmd%/*}
    done
    tree --noreport "$clib"
  } | sed '1d;s/^/ /'
}

# NOTE: recursive help for all subcommands on single page
help_all(){ echo "[all]: ${1:+/$1/}"; searchcmd "$clib" -path "${1}?*" | sort; }

final_options(){ local fn arg=$1; shift
  case $arg
  in -h|--help) fn=help
  ;; -H|--help-all) fn=help_all
  ;; --suggest-next-option) fn=nextcmd
  ;; --list-descriptions) fn=exedesc
  ;; *) return
  esac
  "$fn" "$@"
  exit 0
}

cmd=
while true; do
  (($#)) || die "incomplete [$cmd]" "$cmd"
  arg=$1; shift
  final_options "$arg" "$cmd"
  cmd+=${cmd:+/}$arg

  if [[ -x ${exe:=$clib/$cmd} ]]; then
    # NOTE: suppress further completion FIXME: suppress only if not supported by end-binary
    [[ " $* " =~ " --suggest-next-option " ]] && exit 0
    exec "$exe" "$@"
  fi

  searchcmd -name "${cmd}?*" -print -quit | grep -q . && continue
  die "unknown [$cmd]" "$cmd"
done
